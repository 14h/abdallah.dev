{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$(),\n    _this = this,\n    _jsxFileName = \"/Users/14h/Documents/void/abdallah.dev/components/canvas.js\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect } from 'react';\n\nvar useWindowSize = function useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      windowSize = _useState2[0],\n      setWindowSize = _useState2[1];\n\n  useEffect(function () {\n    // only execute all the code below in client side\n    if (true) {\n      // Handler to call on window resize\n      var handleResize = function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      }; // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return function () {\n        return window.removeEventListener(\"resize\", handleResize);\n      };\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};\n\n_s(useWindowSize, \"Lx6dFCJt7Ze4WyzsCH5RzM+GN9Y=\");\n\nexport var Canvas = function Canvas(props) {\n  _s2();\n\n  var canvasRef = useRef(null);\n  var windowSize = useWindowSize();\n\n  var draw = function draw(ctx, frameCount) {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = '#000000'; // ctx.beginPath();\n\n    ctx.arc(ctx.canvas.width / 2, ctx.canvas.height / 2, 800 * Math.pow(Math.sin(frameCount * 0.005), 2), 0, 2 * Math.PI); // ctx.fill();\n\n    ctx.stroke();\n  };\n\n  useEffect(function () {\n    var canvas = canvasRef.current;\n    var context = canvas.getContext('2d');\n    var frameCount = 0;\n    var animationFrameId; //Our draw came here\n\n    var render = function render() {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return function () {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return __jsx(\"canvas\", _extends({\n    ref: canvasRef\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }\n  }));\n};\n\n_s2(Canvas, \"dGRSo9fEFYv4dTGHma1e4dcwMnA=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/14h/Documents/void/abdallah.dev/components/canvas.js"],"names":["React","useRef","useEffect","useWindowSize","useState","width","undefined","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Canvas","props","canvasRef","draw","ctx","frameCount","clearRect","canvas","fillStyle","arc","Math","sin","PI","stroke","current","context","getContext","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect} from 'react'\n\nconst useWindowSize = () => {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // only execute all the code below in client side\n        if (typeof window !== 'undefined') {\n            // Handler to call on window resize\n            function handleResize() {\n                // Set window width/height to state\n                setWindowSize({\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                });\n            }\n\n            // Add event listener\n            window.addEventListener(\"resize\", handleResize);\n\n            // Call handler right away so state gets updated with initial window size\n            handleResize();\n\n            // Remove event listener on cleanup\n            return () => window.removeEventListener(\"resize\", handleResize);\n        }\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n};\n\nexport const Canvas = props => {\n\n    const canvasRef = useRef(null);\n    const windowSize = useWindowSize();\n\n    const draw = (ctx, frameCount) => {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ctx.fillStyle = '#000000';\n        // ctx.beginPath();\n        ctx.arc(\n            ctx.canvas.width / 2,\n            ctx.canvas.height / 2,\n            800 * Math.sin(frameCount * 0.005) ** 2,\n            0,\n            2 * Math.PI\n        );\n        // ctx.fill();\n        ctx.stroke();\n    }\n\n    useEffect(() => {\n\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        let frameCount = 0;\n        let animationFrameId;\n\n        //Our draw came here\n        const render = () => {\n            frameCount++;\n            draw(context, frameCount);\n            animationFrameId = window.requestAnimationFrame(render);\n        }\n        render();\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n        };\n    }, [draw]);\n\n    return <canvas ref={canvasRef} {...props}/>;\n}\n"]},"metadata":{},"sourceType":"module"}