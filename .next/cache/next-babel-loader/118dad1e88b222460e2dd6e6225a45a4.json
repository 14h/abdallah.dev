{"ast":null,"code":"var _jsxFileName = \"/Users/14h/Documents/void/abdallah.dev/components/canvas.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst useWindowSize = () => {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // only execute all the code below in client side\n    if (false) {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      } // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};\n\nexport const Canvas = props => {\n  const canvasRef = useRef(null);\n  const windowSize = useWindowSize();\n  console.log(windowSize);\n\n  const draw = (ctx, frameCount) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = '#000000'; // ctx.beginPath();\n\n    ctx.arc(ctx.canvas.width / 2, ctx.canvas.height / 2, 800 * Math.sin(frameCount * 0.005) ** 2, 0, 2 * Math.PI); // ctx.fill();\n\n    ctx.stroke();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId; //Our draw came here\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return __jsx(\"canvas\", _extends({\n    ref: canvasRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 12\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/14h/Documents/void/abdallah.dev/components/canvas.js"],"names":["React","useRef","useEffect","useState","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Canvas","props","canvasRef","console","log","draw","ctx","frameCount","clearRect","canvas","fillStyle","arc","Math","sin","PI","stroke","current","context","getContext","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,MAAMC,aAAa,GAAG,MAAM;AACxB;AACA;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BH,QAAQ,CAAC;AACzCI,IAAAA,KAAK,EAAEC,SADkC;AAEzCC,IAAAA,MAAM,EAAED;AAFiC,GAAD,CAA5C;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,eAAmC;AAC/B;AACA,eAASQ,YAAT,GAAwB;AACpB;AACAJ,QAAAA,aAAa,CAAC;AACVC,UAAAA,KAAK,EAAEI,MAAM,CAACC,UADJ;AAEVH,UAAAA,MAAM,EAAEE,MAAM,CAACE;AAFL,SAAD,CAAb;AAIH,OAR8B,CAU/B;;;AACAF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAX+B,CAa/B;;AACAA,MAAAA,YAAY,GAdmB,CAgB/B;;AACA,aAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAb;AACH;AACJ,GArBQ,EAqBN,EArBM,CAAT,CARwB,CA6BhB;;AACR,SAAOL,UAAP;AACH,CA/BD;;AAiCA,OAAO,MAAMW,MAAM,GAAGC,KAAK,IAAI;AAE3B,QAAMC,SAAS,GAAGjB,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMI,UAAU,GAAGD,aAAa,EAAhC;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYf,UAAZ;;AAEA,QAAMgB,IAAI,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAC9BD,IAAAA,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBF,GAAG,CAACG,MAAJ,CAAWlB,KAA/B,EAAsCe,GAAG,CAACG,MAAJ,CAAWhB,MAAjD;AACAa,IAAAA,GAAG,CAACI,SAAJ,GAAgB,SAAhB,CAF8B,CAG9B;;AACAJ,IAAAA,GAAG,CAACK,GAAJ,CACIL,GAAG,CAACG,MAAJ,CAAWlB,KAAX,GAAmB,CADvB,EAEIe,GAAG,CAACG,MAAJ,CAAWhB,MAAX,GAAoB,CAFxB,EAGI,MAAMmB,IAAI,CAACC,GAAL,CAASN,UAAU,GAAG,KAAtB,KAAgC,CAH1C,EAII,CAJJ,EAKI,IAAIK,IAAI,CAACE,EALb,EAJ8B,CAW9B;;AACAR,IAAAA,GAAG,CAACS,MAAJ;AACH,GAbD;;AAeA7B,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMuB,MAAM,GAAGP,SAAS,CAACc,OAAzB;AACA,UAAMC,OAAO,GAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAhB;AACA,QAAIX,UAAU,GAAG,CAAjB;AACA,QAAIY,gBAAJ,CALY,CAOZ;;AACA,UAAMC,MAAM,GAAG,MAAM;AACjBb,MAAAA,UAAU;AACVF,MAAAA,IAAI,CAACY,OAAD,EAAUV,UAAV,CAAJ;AACAY,MAAAA,gBAAgB,GAAGxB,MAAM,CAAC0B,qBAAP,CAA6BD,MAA7B,CAAnB;AACH,KAJD;;AAKAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACTzB,MAAAA,MAAM,CAAC2B,oBAAP,CAA4BH,gBAA5B;AACH,KAFD;AAGH,GAlBQ,EAkBN,CAACd,IAAD,CAlBM,CAAT;AAoBA,SAAO;AAAQ,IAAA,GAAG,EAAEH;AAAb,KAA4BD,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH,CA1CM","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\n\nconst useWindowSize = () => {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // only execute all the code below in client side\n        if (typeof window !== 'undefined') {\n            // Handler to call on window resize\n            function handleResize() {\n                // Set window width/height to state\n                setWindowSize({\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                });\n            }\n\n            // Add event listener\n            window.addEventListener(\"resize\", handleResize);\n\n            // Call handler right away so state gets updated with initial window size\n            handleResize();\n\n            // Remove event listener on cleanup\n            return () => window.removeEventListener(\"resize\", handleResize);\n        }\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n};\n\nexport const Canvas = props => {\n\n    const canvasRef = useRef(null);\n    const windowSize = useWindowSize();\n    console.log(windowSize);\n\n    const draw = (ctx, frameCount) => {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ctx.fillStyle = '#000000';\n        // ctx.beginPath();\n        ctx.arc(\n            ctx.canvas.width / 2,\n            ctx.canvas.height / 2,\n            800 * Math.sin(frameCount * 0.005) ** 2,\n            0,\n            2 * Math.PI\n        );\n        // ctx.fill();\n        ctx.stroke();\n    }\n\n    useEffect(() => {\n\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        let frameCount = 0;\n        let animationFrameId;\n\n        //Our draw came here\n        const render = () => {\n            frameCount++;\n            draw(context, frameCount);\n            animationFrameId = window.requestAnimationFrame(render);\n        }\n        render();\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n        };\n    }, [draw]);\n\n    return <canvas ref={canvasRef} {...props}/>;\n}\n"]},"metadata":{},"sourceType":"module"}